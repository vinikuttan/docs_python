
########################### Descriptor documents ###########################


Methods: __get__, __set__, __delete__

* Descriptors can be implemented with new style classes, (i.e)., class inherited with object or type.

PROTOCOLS:

* __get__(self, obj, obj_type)
    return value

* __set__(self, obj, value)
    return None

* __delete__(self, obj)
    return None 

 
Types:
Non-data Descriptor:
    Object defines with __get__ method 

Data Descriptor:
    Object defines with both __get__ and __set__ methods

Points to Note:
* __get__ methods are always invoked by __getattribute__ method. Altering
  this method would avoid invoking decriptor

* Data descriptor are always override instance dictionary

* Non data descriptor may be overided by instance dictionary

Need of Descriptor:
* To make an chain bounding between class instances or objects on need of any package designs could be supported by descriptors

code example:

class classA(object):
    def __init__(self, val1, val2):
       self.val1 = val1
       self.val2 = val2

    def __get__(self, obj, otype = None):
       print "inside get method"
       return self.val1
    
    def __set__(self, obj, value):
       print "inside set method"
       self.val1 = value

class classB(object):
    a = classA(10, 20)
    b = 5

>>> obj = classB()
>>> obj.a
inside get method
10
>>> obj.a = 100
inside set method
>>>
>>> obj.a
inside get method
100
 
